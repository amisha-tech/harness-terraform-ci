{
  "version": 4,
  "terraform_version": "1.6.4",
  "serial": 2,
  "lineage": "f3e24614-0a4c-0ac6-1d7d-857d80163390",
  "outputs": {
    "myoutput": {
      "value": "autobasecipipeline",
      "type": "string"
    }
  },
  "resources": [
    {
      "mode": "managed",
      "type": "harness_platform_input_set",
      "name": "inputset",
      "provider": "provider[\"registry.terraform.io/harness/harness\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "description": "",
            "git_details": [],
            "git_import_info": [],
            "id": "autoinputset",
            "identifier": "autoinputset",
            "import_from_git": null,
            "input_set_import_request": [],
            "name": "autoinputset",
            "org_id": "InstructorLedTraining",
            "pipeline_id": "autobasecipipeline",
            "project_id": "studenta5acefbaa4",
            "tags": [],
            "yaml": "inputSet:\n  name: autoinputset\n  identifier: autoinputset\n  projectIdentifier: studenta5acefbaa4\n  orgIdentifier: InstructorLedTraining\n  tags: {}\n  pipeline:\n    identifier: autobasecipipeline\n    stages:\n      - stage:\n          identifier: mybuild\n          type: CI\n          spec:\n            execution:\n              steps:\n                - parallel:\n                    - step:\n                        identifier: docompilecode\n                        type: Run\n                        spec:\n                          command: mvn compile\n                - parallel:\n                    - step:\n                        identifier: dorununittest\n                        type: RunTests\n                        spec:\n                          args: test\n                          reports:\n                            type: JUnit\n                            spec:\n                              paths:\n                                - \"**/*.xml\"\n                - parallel:\n                    - step:\n                        identifier: dopmdchecks\n                        type: Run\n                        spec:\n                          command: |\n                            STAGEDIR=/root/myscan/staticcodeanalysis/pmd\n                            DOWNLOADURL=https://github.com/pmd/pmd/releases/download/pmd_releases%2F7.0.0/pmd-dist-7.0.0-bin.zip\n                            FILENAME=pmd.zip\n                            mkdir -p ${STAGEDIR}\n                            curl -s -L -o ${STAGEDIR}/${FILENAME} ${DOWNLOADURL}\n                            unzip ${STAGEDIR}/${FILENAME} -d ${STAGEDIR}\n                            ${STAGEDIR}/pmd-bin-7.0.0/bin/pmd check -d /harness/ -R rulesets/java/quickstart.xml -f xml -r pmdreport.xml --no-progress --no-fail-on-violation\n                            cat pmdreport.xml\n    properties:\n      ci:\n        codebase:\n          build:\n            type: branch\n            spec:\n              branch: myfeature2branch\n"
          },
          "sensitive_attributes": [],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjAifQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "harness_platform_pipeline",
      "name": "autopipeline",
      "provider": "provider[\"registry.terraform.io/harness/harness\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "description": "",
            "git_details": [],
            "git_import_info": [],
            "id": "autobasecipipeline",
            "identifier": "autobasecipipeline",
            "import_from_git": null,
            "name": "autobasecipipeline",
            "org_id": "InstructorLedTraining",
            "pipeline_import_request": [],
            "project_id": "studenta5acefbaa4",
            "tags": [],
            "template_applied": false,
            "template_applied_pipeline_yaml": "",
            "yaml": "pipeline:\n  name: autobasecipipeline\n  identifier: autobasecipipeline\n  projectIdentifier: studenta5acefbaa4\n  orgIdentifier: InstructorLedTraining\n  tags: {}\n  stages:\n    - stage:\n        name: mybuild\n        identifier: mybuild\n        description: \"\"\n        type: CI\n        spec:\n          cloneCodebase: true\n          platform:\n            os: Linux\n            arch: Amd64\n          runtime:\n            type: Cloud\n            spec: {}\n          execution:\n            steps:\n              - parallel:\n                  - step:\n                      type: Run\n                      name: myclonerepo\n                      identifier: myclonerepo\n                      spec:\n                        shell: Sh\n                        command: echo \"Clone Git Repo on $(uname -a)\"\n                  - step:\n                      type: GitClone\n                      name: dogitclone\n                      identifier: dogitclone\n                      spec:\n                        repoName: my-backend-service\n                        cloneDirectory: /root/my-backend-service\n                        build:\n                          type: branch\n                          spec:\n                            branch: main\n              - parallel:\n                  - step:\n                      type: Run\n                      name: mycompilecode\n                      identifier: mycompilecode\n                      spec:\n                        shell: Sh\n                        command: echo \"Compile Code on $(uname -a)\"\n                  - step:\n                      type: Run\n                      name: docompilecode\n                      identifier: docompilecode\n                      spec:\n                        shell: Sh\n                        command: \u003c+input\u003e\n                        envVariables:\n                          JAVA_HOME: /usr/lib/jvm/temurin-17-jdk-amd64\n              - parallel:\n                  - step:\n                      type: Run\n                      name: myrununittest\n                      identifier: myrununittest\n                      spec:\n                        shell: Sh\n                        command: echo \"Run Unit Tests\"\n                  - step:\n                      type: RunTests\n                      name: dorununittest\n                      identifier: dorununittest\n                      spec:\n                        language: Java\n                        buildTool: Maven\n                        args: \u003c+input\u003e\n                        runOnlySelectedTests: true\n                        reports:\n                          type: JUnit\n                          spec:\n                            paths: \u003c+input\u003e\n                        envVariables:\n                          JAVA_HOME: /usr/lib/jvm/temurin-17-jdk-amd64\n                        enableTestSplitting: false\n              - parallel:\n                  - step:\n                      type: Run\n                      name: mycheckcodequality\n                      identifier: mycheckcodequality\n                      spec:\n                        shell: Sh\n                        command: echo \"Check Code Quality\"\n                  - step:\n                      type: Run\n                      name: dopmdchecks\n                      identifier: dopmdchecks\n                      spec:\n                        shell: Sh\n                        command: \u003c+input\u003e\n              - step:\n                  type: Run\n                  name: myscansecrets\n                  identifier: myscansecrets\n                  spec:\n                    shell: Sh\n                    command: echo \"Scan for Leaked Secrets\"\n              - step:\n                  type: Run\n                  name: myscancodevulnerabilities\n                  identifier: myscancodevulnerabilities\n                  spec:\n                    shell: Sh\n                    command: echo \"Scan for Code Vulnerabilities\"\n              - step:\n                  type: Run\n                  name: myscansca\n                  identifier: myscansca\n                  spec:\n                    shell: Sh\n                    command: echo \"Perform Software Composition Analysis (SCA) Scan\"\n              - step:\n                  type: Run\n                  name: mybuildpackage\n                  identifier: mybuildpackage\n                  spec:\n                    shell: Sh\n                    command: echo \"Build Package\"\n              - step:\n                  type: Run\n                  name: mypublishpackage\n                  identifier: mypublishpackage\n                  spec:\n                    shell: Sh\n                    command: echo \"Publish Package to Artifact Repository\"\n              - step:\n                  type: Run\n                  name: mybuildcontainerimage\n                  identifier: mybuildcontainerimage\n                  spec:\n                    shell: Sh\n                    command: echo \"Build Container Image\"\n              - step:\n                  type: Run\n                  name: myruncontainerimagesmoketest\n                  identifier: myruncontainerimagesmoketest\n                  spec:\n                    shell: Sh\n                    command: echo \"Run Container Image Smoke Test\"\n              - step:\n                  type: Run\n                  name: myscancontainerimagevulnerabilities\n                  identifier: myscancontainerimagevulnerabilities\n                  spec:\n                    shell: Sh\n                    command: echo \"Scan for Container Image Vulnerabilities\"\n              - step:\n                  type: Run\n                  name: mysigncontainerimage\n                  identifier: mysigncontainerimage\n                  spec:\n                    shell: Sh\n                    command: echo \"Sign Container Image\"\n              - step:\n                  type: Run\n                  name: mypublishcontainerimage\n                  identifier: mypublishcontainerimage\n                  spec:\n                    shell: Sh\n                    command: echo \"Publish Container Image to Container Registry\"\n              - step:\n                  type: Run\n                  name: myrunintegrationtest\n                  identifier: myrunintegrationtest\n                  spec:\n                    shell: Sh\n                    command: echo \"Run Integration Tests\"\n          caching:\n            enabled: false\n            paths: []\n  properties:\n    ci:\n      codebase:\n        repoName: my-backend-service\n        build: \u003c+input\u003e\n"
          },
          "sensitive_attributes": [],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjAifQ=="
        }
      ]
    }
  ],
  "check_results": null
}
