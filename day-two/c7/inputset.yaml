inputSet:
  name: ${inputset_name}
  identifier: ${inputset_identifier}
  projectIdentifier: ${project_identifier}
  orgIdentifier: ${org_identifier}
  tags: {}
  pipeline:
    identifier: ${pipeline_identifier}
    stages:
      - stage:
          identifier: mybuild
          type: CI
          spec:
            execution:
              steps:
                - step:
                    identifier: docompilecode
                    type: Run
                    spec:
                      command: mvn compile
                - step:
                    identifier: dorununittest
                    type: RunTests
                    spec:
                      args: test
                      reports:
                        type: JUnit
                        spec:
                          paths:
                            - "**/*.xml"
                - step:
                    identifier: dobuildpackage
                    type: Run
                    spec:
                      command: mvn -Dmaven.test.skip=true package
                - step:
                    identifier: dopublishpackage
                    type: Run
                    spec:
                      command: curl -fsSl -u admin:admin123 --upload-file /harness/target/ums-0.0.1-SNAPSHOT.jar https://nexus.<+variable.mydomain>/repository/maven-releases/com/auto/mybackendservice/0.0.<+pipeline.sequenceId>/mybackendservice-0.0.<+pipeline.sequenceId>.jar
                - step:
                    identifier: dobuildcontainerimage
                    type: Run
                    spec:
                      command: |-
                        docker build -t harbor.<+variable.mydomain>/library/<+pipeline.properties.ci.codebase.repoName>:<+pipeline.sequenceId> .
                        docker images 
                - step:
                    identifier: doruncontainerimagesmoketest
                    type: Run
                    spec:
                      command: |
                        docker run -d -p 8080:8080 --name=<+pipeline.properties.ci.codebase.repoName> harbor.<+variable.mydomain>/library/<+pipeline.properties.ci.codebase.repoName>:<+pipeline.sequenceId>
                        docker ps
                        sleep 30
                        curl localhost:8080/api/v1/configinfo | jq
                        docker stop <+pipeline.properties.ci.codebase.repoName>
                        sleep 5
                        docker ps
                        docker rm <+pipeline.properties.ci.codebase.repoName>
                - stepGroup:
                    identifier: formainbranchonly
                    steps:
                      - step:
                          identifier: dobuildandpushcontainerimage
                          type: BuildAndPushDockerRegistry
                          spec:
                            repo: harbor.<+variable.mydomain>/library/<+pipeline.properties.ci.codebase.repoName>
                            tags:
                              - <+pipeline.sequenceId>
                      - step:
                          identifier: dorunintegrationtest
                          type: Run
                          spec:
                            command: |-
                              k8sversion=<+<+matrix.k8sversion>.replace(".","_")>
                              STAGEDIR=/root/mytest/integrationtesting/kind$${k8sversion}
                              mkdir -p $${STAGEDIR} && cd $${STAGEDIR}
                              curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.22.0/kind-linux-amd64 && chmod +x kind
                              ./kind version
                              ./kind create cluster --name cluster<+matrix.k8sversion> --image kindest/node:<+matrix.k8sversion> --kubeconfig cluster$${k8sversion}-kubeconfig
                              kubectl version --kubeconfig cluster$${k8sversion}-kubeconfig
                              kubectl cluster-info --kubeconfig cluster$${k8sversion}-kubeconfig
                              kubectl create deployment <+pipeline.properties.ci.codebase.repoName> --image=harbor.<+variable.mydomain>/library/<+pipeline.properties.ci.codebase.repoName>:<+pipeline.sequenceId> --port=8080 --kubeconfig cluster$${k8sversion}-kubeconfig
                              kubectl expose deployment <+pipeline.properties.ci.codebase.repoName> --port=8080 --target-port=8080 --type=NodePort --kubeconfig cluster$${k8sversion}-kubeconfig
                              kubectl get all -A --kubeconfig cluster$${k8sversion}-kubeconfig
                              declare -A nodeport_cluster
                              nodeport_cluster["$${k8sversion}"]=$(kubectl get svc my-backend-service -o=jsonpath='{.spec.ports[0].nodePort}' --kubeconfig cluster$${k8sversion}-kubeconfig)
                              echo "--- $${nodeport_cluster["$${k8sversion}"]}"
                              declare -A ip_cluster
                              ip_cluster["$${k8sversion}"]=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' cluster<+matrix.k8sversion>-control-plane)
                              echo "--- $${ip_cluster["$${k8sversion}"]}"
                              counter=0
                              until [ $${counter} -ge 120 ] || curl_output=$(curl -sf "http://$${ip_cluster["$${k8sversion}"]}:$${nodeport_cluster["$${k8sversion}"]}/api/v1/configinfo"); do
                                  echo -n "."
                                  sleep 1
                                  counter=$((counter + 1))
                              done
                              echo "---"
                              if [ -z "$${curl_output}" ]; then
                                  echo "Failed after $${counter} attempts"
                                  exit 1
                              fi       
                              if [ -n "$${curl_output}" ]; then
                                echo "Data fetched successfully:"
                                echo "$${curl_output}" | jq .  
                              fi
    properties:
      ci:
        codebase:
          build:
            type: branch
            spec:
              branch: myfeature3branch
